1
1.1
安装后配置
$ git config --global user.name "sytshanli"
$ git config --global user.email "sytshanli@example.com"

1.2
创建本地版本库
$ mkdir learngit-2015.5.10
$ cd learngit-2015.5.10
$ pwd
/e/workspace/learngit-2015.5.10

通过git init命令把这个目录变成Git可以管理的仓库
$ git init
Initialized empty Git repository in E:/workspace/learngit-2015.5.10/.git/

$ vim readme.txt
 vim file1.txt
vim file2.txt
$ git add readme.txt  //用命令git add告诉Git，把文件添加到仓库
git add file*

git commit -m "add three file(readme file1 file2)"//用命令git add告诉Git，把文件提交到仓库

1.3
时光穿梭机（修改内容）
vim readme.txt
cat readme.txt

查看修改情况
git status// 修改了，但是未提交
git diff //查看前后两次修改情况

//重复
git add readme.txt//这时已经修改了
git commit -m "add distributed" //显示修改数目

git status//再次查看状态（显示）


1.4
版本回退

git log//命令显示从最近到最远的提交日志
$ git log --pretty=oneline
4be5b81995c1c79f6c86cdfa212c016b235cdec9 append GPL
749c932c82baa8037c9750241ce58f3a103cd4b2 add distributed
12e0eb6852a1c331f64d69d280d8f8041db7fe46 add three file(readme file1 file 2)

//回退到上上个版本
 git reset --hard HEAD~2

//重新回到开始（版本三）
$ git reset --hard 3628164（//commit id）

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

1.5
工作区和版本库（暂存区（stage） + branch（master + 多个））

1.6
管理修改 
Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中

1.7
撤销修改（工作区  vs 暂存区）
git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
就是让这个文件回到最近一次git commit或git add时的状态

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard HEAD^n

1.8
删除文件
接在文件管理器中把没用的文件删了，或者用rm命令
Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你
从版本库中删除该文件，那就用命令git rm删掉，并且git commit
git checkout其实是用版本库里的版本替换工作区的版





2
2.1
添加远程库
在github上创建一个repo：learngit-2015.5.10 
在本地的learngit仓库下运行命令：
$ git remote add origin git@github.com:michaelliao/learngit.git
添加后，远程库的名字就是 origin

把本地库的所有内容推送到远程库上：
$ git push -u origin master
从现在起，只要本地作了提交，就可以通过命令：

$ git push origin master

2.2
从远程库克隆
git clone https://github.com/sytshanli/Hello-world.git

3
3.1
分支管理
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

3.2
解决冲突 
git checkout -b feature1
在feature1分支上提交：

切换到master分支：git checkout master  Git还会自动提示我们当前master分支比远程的master分支要超前1个提交
提交

master分支和feature1分支各自都分别有新的提交

Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容

git log --graph --pretty=oneline --abbrev-commit

3.3
普通合并
并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支

3.4
bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

3.5
强行删除
开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

3.6
多人协作
git remote -v
origin  https://github.com/sytshanli/learngit-2015.5.10.git (fetch)
origin  https://github.com/sytshanli/learngit-2015.5.10.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址
//推送dev分支
git push origin dev

//推送master分支
git push origin master

创建远程origin的dev分支到本地
git checkout -b dev4 origin/dev4

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

4.1
创建分支
git tag v1.0
方法是找到历史提交的commit id，然后打上就可以了
 git log --pretty=oneline --abbrev-commit

git tag v0.9 6224937
git show <tagname>查看标签信息

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

4.2
操作标签
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签
默认标签是打在最新提交的commit上的